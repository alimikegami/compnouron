// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	entity "github.com/alimikegami/compnouron/internal/competition/entity"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// CompetitionRepository is an autogenerated mock type for the CompetitionRepository type
type CompetitionRepository struct {
	mock.Mock
}

// AcceptCompetitionRegistration provides a mock function with given fields: id
func (_m *CompetitionRepository) AcceptCompetitionRegistration(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseCompetitionRegistrationPeriod provides a mock function with given fields: id
func (_m *CompetitionRepository) CloseCompetitionRegistrationPeriod(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCompetition provides a mock function with given fields: competition
func (_m *CompetitionRepository) CreateCompetition(competition *entity.Competition) error {
	ret := _m.Called(competition)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Competition) error); ok {
		r0 = rf(competition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCompetition provides a mock function with given fields: ID
func (_m *CompetitionRepository) DeleteCompetition(ID uint) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAcceptedCompetitionParticipants provides a mock function with given fields: competitionID
func (_m *CompetitionRepository) GetAcceptedCompetitionParticipants(competitionID uint) (entity.Competition, error) {
	ret := _m.Called(competitionID)

	var r0 entity.Competition
	if rf, ok := ret.Get(0).(func(uint) entity.Competition); ok {
		r0 = rf(competitionID)
	} else {
		r0 = ret.Get(0).(entity.Competition)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(competitionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionByID provides a mock function with given fields: ID
func (_m *CompetitionRepository) GetCompetitionByID(ID uint) (entity.Competition, error) {
	ret := _m.Called(ID)

	var r0 entity.Competition
	if rf, ok := ret.Get(0).(func(uint) entity.Competition); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(entity.Competition)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionByUserID provides a mock function with given fields: userID
func (_m *CompetitionRepository) GetCompetitionByUserID(userID uint) ([]entity.Competition, error) {
	ret := _m.Called(userID)

	var r0 []entity.Competition
	if rf, ok := ret.Get(0).(func(uint) []entity.Competition); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Competition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionRegistration provides a mock function with given fields: competitionID
func (_m *CompetitionRepository) GetCompetitionRegistration(competitionID uint) (entity.Competition, error) {
	ret := _m.Called(competitionID)

	var r0 entity.Competition
	if rf, ok := ret.Get(0).(func(uint) entity.Competition); ok {
		r0 = rf(competitionID)
	} else {
		r0 = ret.Get(0).(entity.Competition)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(competitionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionRegistrationByUserID provides a mock function with given fields: userID
func (_m *CompetitionRepository) GetCompetitionRegistrationByUserID(userID uint) ([]entity.CompetitionRegistration, error) {
	ret := _m.Called(userID)

	var r0 []entity.CompetitionRegistration
	if rf, ok := ret.Get(0).(func(uint) []entity.CompetitionRegistration); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CompetitionRegistration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitions provides a mock function with given fields: limit, offset
func (_m *CompetitionRepository) GetCompetitions(limit int, offset int) ([]entity.Competition, error) {
	ret := _m.Called(limit, offset)

	var r0 []entity.Competition
	if rf, ok := ret.Get(0).(func(int, int) []entity.Competition); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Competition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenCompetitionRegistrationPeriod provides a mock function with given fields: id
func (_m *CompetitionRepository) OpenCompetitionRegistrationPeriod(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: competitionRegistration
func (_m *CompetitionRepository) Register(competitionRegistration entity.CompetitionRegistration) error {
	ret := _m.Called(competitionRegistration)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.CompetitionRegistration) error); ok {
		r0 = rf(competitionRegistration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RejectCompetitionRegistration provides a mock function with given fields: id
func (_m *CompetitionRepository) RejectCompetitionRegistration(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchCompetition provides a mock function with given fields: limit, offset, keyword
func (_m *CompetitionRepository) SearchCompetition(limit int, offset int, keyword string) ([]entity.Competition, error) {
	ret := _m.Called(limit, offset, keyword)

	var r0 []entity.Competition
	if rf, ok := ret.Get(0).(func(int, int, string) []entity.Competition); ok {
		r0 = rf(limit, offset, keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Competition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(limit, offset, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCompetition provides a mock function with given fields: competition
func (_m *CompetitionRepository) UpdateCompetition(competition entity.Competition) error {
	ret := _m.Called(competition)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Competition) error); ok {
		r0 = rf(competition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCompetitionRepository creates a new instance of CompetitionRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompetitionRepository(t testing.TB) *CompetitionRepository {
	mock := &CompetitionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
