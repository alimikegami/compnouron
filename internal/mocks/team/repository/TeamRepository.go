// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	entity "github.com/alimikegami/compnouron/internal/team/entity"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// TeamRepository is an autogenerated mock type for the TeamRepository type
type TeamRepository struct {
	mock.Mock
}

// AddTeamMember provides a mock function with given fields: userID, teamID, isLeader
func (_m *TeamRepository) AddTeamMember(userID uint, teamID uint, isLeader uint) error {
	ret := _m.Called(userID, teamID, isLeader)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, uint) error); ok {
		r0 = rf(userID, teamID, isLeader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTeam provides a mock function with given fields: team
func (_m *TeamRepository) CreateTeam(team entity.Team) (entity.Team, error) {
	ret := _m.Called(team)

	var r0 entity.Team
	if rf, ok := ret.Get(0).(func(entity.Team) entity.Team); ok {
		r0 = rf(team)
	} else {
		r0 = ret.Get(0).(entity.Team)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Team) error); ok {
		r1 = rf(team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTeam provides a mock function with given fields: id
func (_m *TeamRepository) DeleteTeam(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTeamByID provides a mock function with given fields: teamID
func (_m *TeamRepository) GetTeamByID(teamID uint) (entity.Team, error) {
	ret := _m.Called(teamID)

	var r0 entity.Team
	if rf, ok := ret.Get(0).(func(uint) entity.Team); ok {
		r0 = rf(teamID)
	} else {
		r0 = ret.Get(0).(entity.Team)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamMembersByID provides a mock function with given fields: teamID
func (_m *TeamRepository) GetTeamMembersByID(teamID uint) ([]entity.TeamMember, error) {
	ret := _m.Called(teamID)

	var r0 []entity.TeamMember
	if rf, ok := ret.Get(0).(func(uint) []entity.TeamMember); ok {
		r0 = rf(teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TeamMember)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamsByUserID provides a mock function with given fields: ID
func (_m *TeamRepository) GetTeamsByUserID(ID uint) ([]entity.Team, error) {
	ret := _m.Called(ID)

	var r0 []entity.Team
	if rf, ok := ret.Get(0).(func(uint) []entity.Team); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTeam provides a mock function with given fields: team
func (_m *TeamRepository) UpdateTeam(team entity.Team) error {
	ret := _m.Called(team)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Team) error); ok {
		r0 = rf(team)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTeamRepository creates a new instance of TeamRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewTeamRepository(t testing.TB) *TeamRepository {
	mock := &TeamRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
