// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	dto "github.com/alimikegami/compnouron/internal/team/dto"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// TeamUseCase is an autogenerated mock type for the TeamUseCase type
type TeamUseCase struct {
	mock.Mock
}

// CreateTeam provides a mock function with given fields: userID, team
func (_m *TeamUseCase) CreateTeam(userID uint, team dto.TeamRequest) error {
	ret := _m.Called(userID, team)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, dto.TeamRequest) error); ok {
		r0 = rf(userID, team)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTeam provides a mock function with given fields: id, userID
func (_m *TeamUseCase) DeleteTeam(id uint, userID uint) error {
	ret := _m.Called(id, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTeamDetailsByID provides a mock function with given fields: teamID
func (_m *TeamUseCase) GetTeamDetailsByID(teamID uint) (dto.TeamDetailsResponse, error) {
	ret := _m.Called(teamID)

	var r0 dto.TeamDetailsResponse
	if rf, ok := ret.Get(0).(func(uint) dto.TeamDetailsResponse); ok {
		r0 = rf(teamID)
	} else {
		r0 = ret.Get(0).(dto.TeamDetailsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamsByUserID provides a mock function with given fields: userID
func (_m *TeamUseCase) GetTeamsByUserID(userID uint) ([]dto.BriefTeamResponse, error) {
	ret := _m.Called(userID)

	var r0 []dto.BriefTeamResponse
	if rf, ok := ret.Get(0).(func(uint) []dto.BriefTeamResponse); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.BriefTeamResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTeam provides a mock function with given fields: userID, team, teamID
func (_m *TeamUseCase) UpdateTeam(userID uint, team dto.TeamRequest, teamID uint) error {
	ret := _m.Called(userID, team, teamID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, dto.TeamRequest, uint) error); ok {
		r0 = rf(userID, team, teamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTeamUseCase creates a new instance of TeamUseCase. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewTeamUseCase(t testing.TB) *TeamUseCase {
	mock := &TeamUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
