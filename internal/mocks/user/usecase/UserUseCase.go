// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	dto "github.com/alimikegami/compnouron/internal/user/dto"
	entity "github.com/alimikegami/compnouron/internal/user/entity"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *UserUseCase) CreateUser(user *entity.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: credential
func (_m *UserUseCase) Login(credential *dto.Credential) (string, error) {
	ret := _m.Called(credential)

	var r0 string
	if rf, ok := ret.Get(0).(func(*dto.Credential) string); ok {
		r0 = rf(credential)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.Credential) error); ok {
		r1 = rf(credential)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUseCase(t testing.TB) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
